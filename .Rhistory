opt_minvar
my_xts
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
minvar <- add.objective(portfolio=init, type="risk", name="var")
opt_minvar <- optimize.portfolio(R=my_xts, portfolio=minvar,
optimize_method="ROI", trace=TRUE)
opt_minvar
vignette("portfolio_vignette")
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.01, max=0.5)
minvar <- add.objective(portfolio=init, type="risk", name="var")
opt_minvar <- optimize.portfolio(R=my_xts, portfolio=minvar,
optimize_method="ROI", trace=TRUE)
opt_minvar
opt_minvar %>% sort()
opt_minvar %>% class()
opt_minvar %>% type()
opt_minvar %>% typeof()
opt_minvar$weights
opt_minvar$weights %>% sort()
?sort
opt_minvar$weights %>% sort(decreasing = TRUE)
########-------------------------------------------------
library(tidyverse)
library(PortfolioAnalytics)
library(DEoptim)
library(ROI)
require(ROI.plugin.quadprog)
require(ROI.plugin.glpk)
my_wallet <- readRDS(here::here("data","raw.RDS")) %>%
select(ref_date,ticker,ret_adjusted_prices) %>%
pivot_wider(names_from = "ticker",
values_from = "ret_adjusted_prices")
port_spec <- portfolio.spec(colnames(index_returns))
my_wallet
port_spec <- portfolio.spec(colnames(index_returns))
port_spec <- portfolio.spec(colnames(my_wallet))
port_spec
port_spec <- portfolio.spec(colnames(my_wallet %>% select(-ref_date)))
port_spec
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio =port_spec, type = "full_investment")
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "StdDev")
# Solve the optimization problem
opt <- optimize.portfolio(index_returns, portfolio = port_spec, optimize_method = "ROI")
index(my_xts) <- as.Date(index(my_xts))
my_xts <-
my_wallet %>%
slice(-1) %>%
tk_xts()
index(my_xts) <- as.Date(index(my_xts))
# Solve the optimization problem
opt <- optimize.portfolio(my_xts, portfolio = port_spec, optimize_method = "ROI")
my_xts <-
my_wallet %>%
slice(-1) %>%
tk_xts()
library(timetk)
my_xts <-
my_wallet %>%
slice(-1) %>%
tk_xts()
index(my_xts) <- as.Date(index(my_xts))
# Solve the optimization problem
opt <- optimize.portfolio(my_xts, portfolio = port_spec, optimize_method = "ROI")
opt
extractWeights(opt)
chart.Weights(opt)
## quadract function--------------------
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(my_wallet))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to maximize portfolio mean return
port_spec <- add.objective(portfolio = port_spec, type = "return", name = "mean")
# Add an objective to minimize portfolio variance
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "var", risk_aversion = 10)
# Solve the optimization problem
opt <- optimize.portfolio(R = index_returns, portfolio = port_spec, optimize_method = "ROI")
# Solve the optimization problem
opt <- optimize.portfolio(R = my_xts, portfolio = port_spec, optimize_method = "ROI")
## quadract function--------------------
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(my_wallet))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to maximize portfolio mean return
port_spec <- add.objective(portfolio = port_spec, type = "return", name = "mean")
# Add an objective to minimize portfolio variance
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "var", risk_aversion = 10)
# Solve the optimization problem
opt <- optimize.portfolio(R = my_xts,
portfolio = port_spec,
optimize_method = "ROI")
## quadract function--------------------
# Create the portfolio specification
port_spec <- portfolio.spec(colnames(my_wallet %>% select(-ref_date)))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to maximize portfolio mean return
port_spec <- add.objective(portfolio = port_spec, type = "return", name = "mean")
# Add an objective to minimize portfolio variance
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "var", risk_aversion = 10)
# Solve the optimization problem
opt <- optimize.portfolio(R = my_xts,
portfolio = port_spec,
optimize_method = "ROI")
my_wallet
equal_weights <- rep(1 / (ncol(my_wallet)-1), (ncol(my_wallet)-1))
equal_weights
## appliying
asset_returns <- my_xts
r_benchmark <- Return.portfolio(R = asset_returns, weights = equal_weights, rebalance_on = "quarters")
colnames(r_benchmark) <- "benchmark"
plot(r_benchmark)
## define optimatin problem
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(asset_returns))
port_spec
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.98, max_sum=1.02)
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "StdDev")
# Print the portfolio specification
print(port_spec)
## backtesting
# Run the optimization
opt_rebal_base <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "ROI",
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Print the results
print(opt_rebal_base)
chart.Weights(opt_rebal_base)
returns_base <- Return.portfolio(R = asset_returns, weights = extractWeights(opt_rebal_base))
colnames(returns_base) <- "base"
returns_rb <- Return.portfolio(R = asset_returns, weights = extractWeights(opt_rebal_base))
returns_base <- Return.portfolio(R = asset_returns, weights = extractWeights(opt_rebal_base))
ret <- cbind(r_benchmark, returns_base)
table.AnnualizedReturns(R = ret)
charts.PerformanceSummary(R = ret)
## robust optimizatoin
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random", rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
## robust optimizatoin
rp <- random_portfolios(portfolio=port_spec, permutations = 500, rp_method ='simplex')
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Chart the weights
chart.Weights(opt_rebal_rb_robust)
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
opt_rebal_rb_robust
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Chart the weights
chart.Weights(opt_rebal_rb_robust)
# Chart the weights
chart.Weights(opt_rebal_rb_robust)
port_spec
?optimize.portfolio.rebalancing
rp
## robust optimizatoin
rp <- random_portfolios(portfolio=port_spec, permutations = 100, rp_method ='simplex')
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
port_spec <- add.objective(portfolio = port_spec,
type = "risk_budget",
name = "StdDev",
min_prisk = 0.05,
max_prisk = 0.1)
opt_rebal_rb <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "random", rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.98, max_sum=1.02)
## define optimatin problem
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(asset_returns))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.98, max_sum=1.02)
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "StdDev")
# Print the portfolio specification
print(port_spec)
## backtesting
# Run the optimization
opt_rebal_base <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "ROI",
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Print the results
print(opt_rebal_base)
chart.Weights(opt_rebal_base)
# refine objetctives
rp <- random_portfolios(portfolio=port_spec, permutations = 100, rp_method ='simplex')
port_spec <- add.objective(portfolio = port_spec,
type = "risk_budget",
name = "StdDev",
min_prisk = 0.05,
max_prisk = 0.1)
opt_rebal_rb <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "random", rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.99, max_sum=1.01)
## define optimatin problem
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(asset_returns))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.99, max_sum=1.01)
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "StdDev")
# Print the portfolio specification
print(port_spec)
## backtesting
# Run the optimization
opt_rebal_base <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "ROI",
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Print the results
print(opt_rebal_base)
chart.Weights(opt_rebal_base)
# refine objetctives
rp <- random_portfolios(portfolio=port_spec, permutations = 100, rp_method ='simplex')
port_spec <- add.objective(portfolio = port_spec,
type = "risk_budget",
name = "StdDev",
min_prisk = 0.05,
max_prisk = 0.1)
opt_rebal_rb <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "random", rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
## define optimatin problem
# Create the portfolio specification
port_spec <- portfolio.spec(assets = colnames(asset_returns))
# Add a full investment constraint such that the weights sum to 1
port_spec <- add.constraint(portfolio = port_spec, type = "full_investment")
#port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum_constraint", min_sum=0.99, max_sum=1.01)
# Add a long only constraint such that the weight of an asset is between 0 and 1
port_spec <- add.constraint(portfolio = port_spec, type = "long_only")
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec, type = "risk", name = "StdDev")
# Print the portfolio specification
print(port_spec)
## backtesting
# Run the optimization
opt_rebal_base <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "ROI",
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
# Print the results
print(opt_rebal_base)
chart.Weights(opt_rebal_base)
# refine objetctives
rp <- random_portfolios(portfolio=port_spec, permutations = 100, rp_method ='simplex')
port_spec <- add.objective(portfolio = port_spec,
type = "risk_budget",
name = "StdDev",
min_prisk = 0.05,
max_prisk = 0.1)
opt_rebal_rb <- optimize.portfolio.rebalancing(R = asset_returns,
portfolio = port_spec,
optimize_method = "random", rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
chart.Weights(opt_rebal_rb)
## robust optimizatoin
opt_rebal_rb_robust <- optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
# Chart the weights
chart.Weights(opt_rebal_rb_robust)
returns_base <- Return.portfolio(R = asset_returns, weights = extractWeights(opt_rebal_base))
returns_rb <- Return.portfolio(R = asset_returns, weights = extractWeights(opt_rebal_rb))
ret <- cbind(r_benchmark, returns_base,returns_rb)
table.AnnualizedReturns(R = ret)
charts.PerformanceSummary(R = ret)
## robust optimizatoin
opt_rebal_rb_robust <-
optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
## robust optimizatoin
opt_rebal_rb_robust <-
optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "random",
#rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
## robust optimizatoin
opt_rebal_rb_robust <-
optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "DEoptim",
#rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
## robust optimizatoin
opt_rebal_rb_robust <-
optimize.portfolio.rebalancing(
R = asset_returns,
momentFUN = "moments_robust",
portfolio = port_spec,
optimize_method = "DEoptim",
#rp = rp,
trace = TRUE,
rebalance_on = "quarters",
training_period = 60,
rolling_window = 60)
opt_rebal_rb_robust
library(tidyverse) # ferramentas para análise de dados
library(janitor) # ferramentas para limpeza de dados
library(skimr) # análise de qualidade de dados
library(dataxray) # exploração de dados automática
library(explore) # exploração de dados automática
library(DataExplorer) # exploração de dados automática
library(correlationfunnel) # análise de correlação
library(ggcorrplot) # análise de correlação
### carregar os dados
dados <- readRDS(here::here("data","cleaned.RDS"))
## primeiro resumo dos dados com glimpse
dados %>% glimpse()
dados %>% head()
## avaliar qualidade dos dados com skimr
skim(dados)
## EDA automática com DataExplorer
create_report(dados, y = "TAEE11.SA")
dados %>% anyNA()
create_report(., y = "B3SA3.SA")
## EDA automática com DataExplorer
dados %>%
select(1:5) %>%
create_report(., y = "B3SA3.SA")
?create_report
airquality
airquality %>% glimpse()
## EDA automática com xray
dados %>%
make_xray() %>%
view_xray()
## EDA automática com
dados %>% explore()
## EDA automática com DataExplorer
dados %>%
select(6:12) %>%
create_report(., y = "B3SA3.SA")
## EDA automática com DataExplorer
dados %>%
select(3:8) %>%
create_report(., y = "B3SA3.SA")
## análise de correlação
dados %>%
cor() %>%
ggcorrplot(
type = "lower",
insig = "blank",
lab = TRUE,
digits = 3
)
## análise de correlação
dados %>%
selectr(-1) %>%
cor() %>%
ggcorrplot(
type = "lower",
insig = "blank",
lab = TRUE,
digits = 3
)
dados %>%
select(-1)
## análise de correlação
dados %>%
select(-1) %>%
cor() %>%
ggcorrplot(
type = "lower",
insig = "blank",
lab = TRUE,
digits = 3
)
## análise de correlação
dados %>%
select(-1) %>%
cor() %>%
ggcorrplot(
type = "lower",
insig = "blank",
#   lab = TRUE,
digits = 3
)
## correlation funnel
dados %>%
select(-1) %>%
binarize(n_bins = 2) %>%
glimpse()
## EDA automática com DataExplorer
set.seed(50)
## correlation funnel
dados %>%
select(-1) %>%
binarize(n_bins = 2) %>%
glimpse()
dados %>%
select(-1) %>%
binarize(n_bins = 2) %>%
correlate(target = B3SA3.SA__0_Inf) %>%
plot_correlation_funnel(interactive = TRUE)
